@page "/data/{Document}/{Timeseries}"
@using Plotly.Blazor.Traces.ScatterLib
@using SharpHomeServer.Data
@using Plotly.Blazor.LayoutLib
@inject SharpHomeServer.Data.IChartDataProvider provider;
@inject TimeZoneService TimeZoneService

@if (chartData == null)
{
    <h1>Loading...</h1>
    <p></p>
}
else
{
    <h1>@chartData.Name</h1>
    <p>@chartData.Explanation</p>

    <p>Data from @timeSeriesStart.ToShortDateString() to @timeSeriesEnd.ToShortDateString() </p>
}

<PlotlyChart @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" />

<TimeGoupBySelector OnClick="HandleGroupByChange"></TimeGoupBySelector>

<TimeRangePicker Start="@start" End="@end" EndChanged="HandleEndChange" StartChanged="HandleStartChange" ></TimeRangePicker>

@code {
    [Parameter]
    public string Document { get; set; }

    [Parameter]
    public string Timeseries { get; set; }

    bool paramsChanged = false;

    DateTime start;
    DateTime end;

    DateTime timeSeriesStart;
    DateTime timeSeriesEnd;

    string groupBy = ValidGroupByTimes.Days.ToString("g");

    PlotlyChart chart;
    ChartOption chartData;
    Config config = new Config();
    Layout layout = new Layout()
    {
        XAxis = new List<XAxis> { new XAxis() { TickFormat = "%e.%m" } },
        YAxis = new List<YAxis> { new YAxis() }
    };
    // Using of the interface IList is important for the event callback!
    IList<ITrace> data = new List<ITrace>()
{
       GetScatter()
    };

    DateTimeOffset userTime;

    private static Scatter GetScatter()
    {
        return new Scatter
        {
            Name = "ScatterTrace",
            Mode = ModeFlag.Lines | ModeFlag.Markers,

            X = new List<object> { },
            Y = new List<object> { },

        };
    }

    protected override async Task OnParametersSetAsync()
    {
        var (start1, end1) = await provider.GetTimeSeriesDatetimeRange(Document, Timeseries);
        timeSeriesStart = start1;
        timeSeriesEnd = end1;
        chartData = provider.GetChartOptionFor(Document, Timeseries);
        await ClearAndUpdateChart();
        StateHasChanged();
        paramsChanged = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        userTime = await TimeZoneService.GetLocalDateTime(DateTimeOffset.UtcNow);

        if (firstRender || paramsChanged)
        {
            await SetStartEnd();
            await ExtendData(groupBy);
            paramsChanged = false;
        }
    }

    private async Task ExtendData(string groupBy)
    {
        if (!(chart.Data.FirstOrDefault() is Scatter scatter)) return;

        var (x, y) = provider.GetReadingTimeSeries(Document, Timeseries, groupBy, start, end);

        if (groupBy == "Minutes" || groupBy == "Hours")
        {
            var offset = userTime.Offset;
            x = x.Select(x => x.AddHours(offset.TotalHours)).ToList(); // we get the data in utc, we want them in the users offset if we use a timeunit where it matters.
        }

        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x.Cast<object>().ToList());
            scatter.Y.AddRange(y.Cast<object>().ToList());

            layout.XAxis.First().TickFormat = GetTickFormat(groupBy);
            var title = new Plotly.Blazor.LayoutLib.XAxisLib.Title();
            title.Text = chartData?.Legend;
            layout.XAxis.First().Title = title;
            layout.YAxis.First().TickSuffix = chartData?.Unit;
            await chart.React();
        }
        else
        {
            await chart.ExtendTrace(x, y, data.IndexOf(scatter));
        }

    }

    async Task SetStartEnd()
    {
        if (start == DateTime.MinValue && end == DateTime.MinValue)
        {
            start = timeSeriesStart;
            end = timeSeriesEnd;
        }
    }

    async Task HandleGroupByChange(string newGroupBy)
    {
        groupBy = newGroupBy;
        paramsChanged = true;
        await ClearAndUpdateChart();
    }

    async Task HandleStartChange(DateTime start)
    {
        this.start = start;
        this.paramsChanged = true;
        await ClearAndUpdateChart();
    }

    async Task HandleEndChange(DateTime end)
    {
        this.end = end;
        this.paramsChanged = true;
        await ClearAndUpdateChart();
    }

    private async Task ClearAndUpdateChart()
    {
        if (chart == null)
        {
            return;
        }

        await chart.Clear();
        data.Clear();
        data.Add(GetScatter());
        await chart.React();
    }

    private string GetTickFormat(string timeSeries)
    {
        var rv = timeSeries switch
        {
            "Minutes" => "%Y-%m-%d:%H:%M",
            "Hours" => "%Y-%m-%d:%H",
            "Days" => "%Y-%m-%d",
            "Months" => "%Y-%m",
            "Quarters" => "%Y-%m",
            "Years" => "%Y",
            _ => "%x"
        };
        return rv;
    }

}