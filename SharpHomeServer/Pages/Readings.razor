@page "/readings/{Document}/{Timeseries}"
@using Plotly.Blazor.Traces.ScatterLib
@inject SharpHomeServer.Data.IChartDataProvider provider;
@using SharpHomeServer.Data

@if (chartData == null)
{
    <h1>Loading...</h1>
    <p></p>
}
else
{
    <h1>@chartData.Name</h1>
    <p>@chartData.Explanation</p>
}

<PlotlyChart @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" />

<TimeGoupBySelector OnClick="HandleGroupByChange"></TimeGoupBySelector>

@code {

    [Parameter]
    public string Document { get; set; }

    [Parameter]
    public string Timeseries { get; set; }

    ChartOption chartData;


    PlotlyChart chart;
    Config config = new Config();
    Layout layout = new Layout();
    // Using of the interface IList is important for the event callback!
    IList<ITrace> data = new List<ITrace>()
    {
       GetScatter()
    };

    private static Scatter GetScatter()
    {
        return new Scatter
        {
            Name = "ScatterTrace",
            Mode = ModeFlag.Lines | ModeFlag.Markers,

            X = new List<object> { },
            Y = new List<object> { },
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || data.Count() == 0)
        {

            chartData = provider.GetChartOptionFor(Document, Timeseries);
            await ExtendData(ValidGroupByTimes.Days.ToString("g"));
            //await ExtendDataCost();
            //var (start1, end1) = provider.GetStartEndOfTimeSeries(type);

            //start = start1;
            //end = end1;
        }
    }

    private async Task ExtendData(string groupBy)
    {
        if (!(chart.Data.FirstOrDefault() is Scatter scatter)) return;

        var max = (int?)scatter.X?.Max();
        var (x, y) = provider.GetReadingTimeSeries(Document, Timeseries, groupBy);


        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x.Cast<object>().ToList());
            scatter.Y.AddRange(y.Cast<object>().ToList());
            await chart.React();
        }
        else
        {
            await chart.ExtendTrace(x, y, data.IndexOf(scatter));
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (chart == null)
        {
            return;
        }

        await chart.Clear();
        data.Clear();
        data.Add(GetScatter());
        chartData = provider.GetChartOptionFor(Document, Timeseries);
        await ExtendData(ValidGroupByTimes.Days.ToString("g"));

    }

    async Task HandleGroupByChange(string newGroupBy)
    {
        await chart.Clear();
        data.Clear();
        data.Add(GetScatter());
        chartData = provider.GetChartOptionFor(Document, Timeseries);
        await ExtendData(newGroupBy);
    }
}
